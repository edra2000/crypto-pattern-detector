<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>كاشف الأنماط الفنية للعملات الرقمية</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
            color: #fff;
            min-height: 100vh;
            direction: rtl;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .search-container {
            position: relative;
            flex: 1;
            max-width: 300px;
        }

        .search-container input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border: 2px solid #333;
            border-radius: 25px;
            background: #1a1a1a;
            color: #fff;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .search-container input:focus {
            outline: none;
            border-color: #00d4ff;
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
        }

        .search-container i {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #888;
        }

        .refresh-btn {
            padding: 1rem 2rem;
            background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);
            border: none;
            border-radius: 25px;
            color: #000;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);
        }

        .loading {
            text-align: center;
            padding: 4rem 2rem;
            display: none;
        }

        .loading.show {
            display: block;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid #333;
            border-top: 4px solid #00d4ff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 2rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .crypto-card {
            background: linear-gradient(145deg, #1e1e1e, #2a2a2a);
            border-radius: 20px;
            padding: 1.5rem;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
            border: 1px solid #333;
        }

        .crypto-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 212, 255, 0.2);
            border-color: #00d4ff;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .coin-info h3 {
            font-size: 1.3rem;
            margin-bottom: 0.25rem;
            color: #00d4ff;
        }

        .coin-info .symbol {
            color: #888;
            font-size: 0.9rem;
        }

        .price-info {
            text-align: left;
        }

        .price {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 0.25rem;
        }

        .change {
            font-size: 0.9rem;
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
        }

        .change.positive {
            background: rgba(46, 213, 115, 0.2);
            color: #2ed573;
        }

        .change.negative {
            background: rgba(255, 71, 87, 0.2);
            color: #ff4757;
        }

        .pattern-info {
            margin: 1rem 0;
            padding: 1rem;
            background: rgba(0, 212, 255, 0.1);
            border-radius: 10px;
            border-right: 4px solid #00d4ff;
        }

        .pattern-name {
            font-weight: bold;
            color: #00d4ff;
            margin-bottom: 0.5rem;
        }

        .pattern-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
        }

        .detail-label {
            color: #888;
        }

        .detail-value {
            font-weight: bold;
        }

        .targets {
            display: flex;
            justify-content: space-between;
            margin-top: 1rem;
            gap: 0.5rem;
        }

        .target {
            flex: 1;
            text-align: center;
            padding: 0.75rem;
            border-radius: 10px;
            font-size: 0.85rem;
        }

        .target1 {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .target2 {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .stop-loss {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            color: #000;
        }

        .error-message {
            text-align: center;
            padding: 3rem;
            color: #ff4757;
        }

        .error-message i {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .cards-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .controls {
                flex-direction: column;
            }
            
            .search-container {
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1><i class="fas fa-chart-line"></i> كاشف الأنماط الفنية</h1>
            <p>تحليل حقيقي للأنماط الفنية في العملات الرقمية</p>
        </header>

        <div class="controls">
            <div class="search-container">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="البحث عن عملة...">
            </div>
            <button id="refreshBtn" class="refresh-btn">
                <i class="fas fa-sync-alt"></i>
                تحديث البيانات
            </button>
        </div>

        <div id="loading" class="loading">
            <div class="loading-spinner"></div>
            <h3>جاري تحليل الأنماط الفنية...</h3>
            <p>يتم فحص العملات الرقمية وتحليل الأنماط</p>
        </div>

        <div id="cardsGrid" class="cards-grid"></div>
    </div>

    <script>
        class PatternDetector {
            constructor() {
                this.cryptoData = new Map();
                this.isLoading = false;
                this.init();
            }

            async init() {
                console.log('🚀 بدء تشغيل كاشف الأنماط...');
                this.setupEventListeners();
                await this.loadData();
            }

            setupEventListeners() {
                const refreshBtn = document.getElementById('refreshBtn');
                const searchInput = document.getElementById('searchInput');

                refreshBtn.addEventListener('click', () => {
                    if (!this.isLoading) {
                        this.loadData();
                    }
                });

                searchInput.addEventListener('input', (e) => {
                    this.filterCards(e.target.value);
                });
            }

            showLoading(show) {
                const loading = document.getElementById('loading');
                const grid = document.getElementById('cardsGrid');
                
                if (show) {
                    loading.classList.add('show');
                    grid.style.display = 'none';
                    this.isLoading = true;
                } else {
                    loading.classList.remove('show');
                    grid.style.display = 'grid';
                    this.isLoading = false;
                }
            }

            async loadData() {
                try {
                    this.showLoading(true);
                    console.log('📊 جاري تحميل البيانات...');
                    
                    // قائمة العملات الشائعة
                    const symbols = [
                        'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT',
                        'SOLUSDT', 'DOTUSDT', 'DOGEUSDT', 'AVAXUSDT', 'SHIBUSDT',
                        'MATICUSDT', 'LTCUSDT', 'UNIUSDT', 'LINKUSDT', 'ATOMUSDT',
                        'ETCUSDT', 'XLMUSDT', 'BCHUSDT', 'FILUSDT', 'TRXUSDT'
                    ];

                    this.cryptoData.clear();
                    
                    // تحميل البيانات بشكل متتالي لتجنب حد الطلبات
                    for (let i = 0; i < symbols.length; i++) {
                        try {
                            const symbol = symbols[i];
                            console.log(`📈 تحليل ${symbol}...`);
                            
                            const data = await this.analyzeSymbol(symbol);
                            if (data && data.patternDetected) {
                                this.cryptoData.set(symbol, data);
                                console.log(`✅ تم اكتشاف نمط في ${symbol}: ${data.pattern}`);
                            }
                            
                            // انتظار قصير بين الطلبات
                            await this.sleep(200);
                            
                        } catch (error) {
                            console.warn(`⚠️ خطأ في تحليل ${symbols[i]}:`, error.message);
                        }
                    }

                    console.log(`🎯 تم اكتشاف ${this.cryptoData.size} نمط`);
                    this.renderCards();
                    
                } catch (error) {
                    console.error('❌ خطأ في تحميل البيانات:', error);
                    this.showError('حدث خطأ في تحميل البيانات. يرجى المحاولة مرة أخرى.');
                } finally {
                    this.showLoading(false);
                }
            }

            async analyzeSymbol(symbol) {
                try {
                    // جلب بيانات السعر الحالي
                    const priceResponse = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbol=${symbol}`);
                    if (!priceResponse.ok) throw new Error('فشل في جلب بيانات السعر');
                    const priceData = await priceResponse.json();

                    // جلب بيانات الشموع
                    const candlesResponse = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=1h&limit=100`);
                    if (!candlesResponse.ok) throw new Error('فشل في جلب بيانات الشموع');
                    const candlesData = await candlesResponse.json();

                    const candles = candlesData.map(candle => ({
                        open: parseFloat(candle[1]),
                        high: parseFloat(candle[2]),
                        low: parseFloat(candle[3]),
                        close: parseFloat(candle[4]),
                        volume: parseFloat(candle[5]),
                        time: new Date(candle[0])
                    }));

                    // تحليل الأنماط
                    const pattern = this.detectPattern(candles);
                    if (!pattern.detected) return null;

                    return {
                        symbol: symbol,
                        name: symbol.replace('USDT', ''),
                        price: parseFloat(priceData.lastPrice),
                        change: parseFloat(priceData.priceChangePercent),
                        volume: parseFloat(priceData.volume),
                        pattern: pattern.type,
                        patternName: pattern.name,
                        confidence: pattern.confidence,
                        breakoutStatus: pattern.breakoutStatus,
                        signalStrength: pattern.signalStrength,
                        targets: pattern.targets,
                        patternDetected: true,
                        lastUpdate: new Date()
                    };

                } catch (error) {
                    console.warn(`تعذر تحليل ${symbol}:`, error.message);
                    return null;
                }
            }

            detectPattern(candles) {
                if (candles.length < 50) {
                    return { detected: false };
                }

                // تحليل مبسط للأنماط
                const closes = candles.map(c => c.close);
                const highs = candles.map(c => c.high);
                const lows = candles.map(c => c.low);
                const volumes = candles.map(c => c.volume);

                // البحث عن قاع مزدوج
                const doubleBottom = this.findDoubleBottom(lows, volumes);
                if (doubleBottom.detected) return doubleBottom;

                // البحث عن قمة مزدوجة
                const doubleTop = this.findDoubleTop(highs, volumes);
                if (doubleTop.detected) return doubleTop;

                // البحث عن مثلث صاعد
                const ascendingTriangle = this.findAscendingTriangle(highs, lows);
                if (ascendingTriangle.detected) return ascendingTriangle;

                return { detected: false };
            }

            findDoubleBottom(lows, volumes) {
                const len = lows.length;
                if (len < 30) return { detected: false };

                // البحث عن قاعين متقاربين
                for (let i = 10; i < len - 20; i++) {
                    for (let j = i + 10; j < len - 10; j++) {
                        const bottom1 = lows[i];
                        const bottom2 = lows[j];
                        const diff = Math.abs(bottom1 - bottom2) / bottom1;

                        if (diff < 0.03) { // فرق أقل من 3%
                            // التحقق من وجود قمة بينهما
                            const middleHigh = Math.max(...lows.slice(i, j));
                            const currentPrice = lows[len - 1];

                            if (middleHigh > bottom1 * 1.05) { // قمة أعلى بـ 5%
                                const confidence = this.calculateConfidence(diff, volumes, i, j);
                                const targets = this.calculateTargets(bottom1, middleHigh, 'bullish');

                                return {
                                    detected: true,
                                    type: 'double-bottom',
                                    name: 'القاع المزدوج',
                                    confidence: `${Math.round(confidence)}%`,
                                    breakoutStatus: currentPrice > middleHigh ? 'مؤكد' : 'في انتظار التأكيد',
                                    signalStrength: confidence > 75 ? 'قوية' : confidence > 60 ? 'متوسطة' : 'ضعيفة',
                                    targets: targets
                                };
                            }
                        }
                    }
                }

                return { detected: false };
            }

            findDoubleTop(highs, volumes) {
                const len = highs.length;
                if (len < 30) return { detected: false };

                // البحث عن قمتين متقاربتين
                for (let i = 10; i < len - 20; i++) {
                    for (let j = i + 10; j < len - 10; j++) {
                        const top1 = highs[i];
                        const top2 = highs[j];
                        const diff = Math.abs(top1 - top2) / top1;

                        if (diff < 0.03) { // فرق أقل من 3%
                            // التحقق من وجود قاع بينهما
                            const middleLow = Math.min(...highs.slice(i, j));
                            const currentPrice = highs[len - 1];

                            if (middleLow < top1 * 0.95) { // قاع أقل بـ 5%
                                const confidence = this.calculateConfidence(diff, volumes, i, j);
                                const targets = this.calculateTargets(top1, middleLow, 'bearish');

                                return {
                                    detected: true,
                                    type: 'double-top',
                                    name: 'القمة المزدوجة',
                                    confidence: `${Math.round(confidence)}%`,
                                    breakoutStatus: currentPrice < middleLow ? 'مؤكد' : 'في انتظار التأكيد',
                                    signalStrength: confidence > 75 ? 'قوية' : confidence > 60 ? 'متوسطة' : 'ضعيفة',
                                    targets: targets
                                };
                            }
                        }
                    }
                }

                return { detected: false };
            }

            findAscendingTriangle(highs, lows) {
                const len = highs.length;
                if (len < 40) return { detected: false };

                const recent = len - 30;
                const recentHighs = highs.slice(recent);
                const recentLows = lows.slice(recent);

                // البحث عن مقاومة أفقية
                const resistance = Math.max(...recentHighs);
                const resistanceCount = recentHighs.filter(h => Math.abs(h - resistance) / resistance < 0.02).length;

                // البحث عن قيعان صاعدة
                const lowTrend = this.calculateTrend(recentLows);

                if (resistanceCount >= 2 && lowTrend > 0) {
                    const confidence = Math.min(90, 60 + (resistanceCount * 5) + (lowTrend * 100));
                    const currentPrice = highs[len - 1];
                    const support = Math.min(...recentLows);
                    const targets = this.calculateTargets(resistance, support, 'bullish');

                    return {
                        detected: true,
                        type: 'ascending-triangle',
                        name: 'المثلث الصاعد',
                        confidence: `${Math.round(confidence)}%`,
                        breakoutStatus: currentPrice > resistance ? 'مؤكد' : 'في انتظار التأكيد',
                        signalStrength: confidence > 75 ? 'قوية' : confidence > 60 ? 'متوسطة' : 'ضعيفة',
                        targets: targets
                    };
                }

                return { detected: false };
            }

                       calculateConfidence(priceDiff, volumes, index1, index2) {
                let confidence = 70; // قاعدة أساسية

                // تقليل الثقة كلما زاد الفرق بين النقاط
                confidence -= (priceDiff * 1000); // تقليل حسب الفرق

                // زيادة الثقة إذا كان الحجم مرتفع عند النقاط المهمة
                const avgVolume = volumes.reduce((a, b) => a + b, 0) / volumes.length;
                const volume1 = volumes[index1] || avgVolume;
                const volume2 = volumes[index2] || avgVolume;

                if (volume1 > avgVolume * 1.2) confidence += 5;
                if (volume2 > avgVolume * 1.2) confidence += 5;

                // التأكد من أن الثقة في النطاق المناسب
                return Math.max(50, Math.min(95, confidence));
            }

            calculateTargets(price1, price2, direction) {
                const range = Math.abs(price1 - price2);
                
                if (direction === 'bullish') {
                    const breakoutLevel = Math.max(price1, price2);
                    return {
                        target1: `$${(breakoutLevel + range * 0.618).toFixed(4)}`,
                        target2: `$${(breakoutLevel + range * 1.0).toFixed(4)}`,
                        stopLoss: `$${(Math.min(price1, price2) * 0.98).toFixed(4)}`
                    };
                } else {
                    const breakoutLevel = Math.min(price1, price2);
                    return {
                        target1: `$${(breakoutLevel - range * 0.618).toFixed(4)}`,
                        target2: `$${(breakoutLevel - range * 1.0).toFixed(4)}`,
                        stopLoss: `$${(Math.max(price1, price2) * 1.02).toFixed(4)}`
                    };
                }
            }

            calculateTrend(prices) {
                if (prices.length < 10) return 0;
                
                const n = prices.length;
                const sumX = (n * (n - 1)) / 2;
                const sumY = prices.reduce((a, b) => a + b, 0);
                const sumXY = prices.reduce((sum, price, index) => sum + (price * index), 0);
                const sumX2 = (n * (n - 1) * (2 * n - 1)) / 6;
                
                const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
                return slope / (sumY / n); // نسبة الميل
            }

            renderCards() {
                const grid = document.getElementById('cardsGrid');
                
                if (this.cryptoData.size === 0) {
                    grid.innerHTML = `
                        <div class="error-message">
                            <i class="fas fa-search"></i>
                            <h3>لم يتم العثور على أنماط فنية</h3>
                            <p>جرب التحديث مرة أخرى أو تحقق من اتصال الإنترنت</p>
                        </div>
                    `;
                    return;
                }

                const cards = Array.from(this.cryptoData.values())
                    .sort((a, b) => {
                        // ترتيب حسب قوة الإشارة ثم الثقة
                        const strengthOrder = { 'قوية': 3, 'متوسطة': 2, 'ضعيفة': 1 };
                        const aStrength = strengthOrder[a.signalStrength] || 0;
                        const bStrength = strengthOrder[b.signalStrength] || 0;
                        
                        if (aStrength !== bStrength) {
                            return bStrength - aStrength;
                        }
                        
                        const aConf = parseInt(a.confidence);
                        const bConf = parseInt(b.confidence);
                        return bConf - aConf;
                    })
                    .map(crypto => this.createCard(crypto))
                    .join('');

                grid.innerHTML = cards;
            }

            createCard(crypto) {
                const changeClass = crypto.change >= 0 ? 'positive' : 'negative';
                const changeIcon = crypto.change >= 0 ? 'fa-arrow-up' : 'fa-arrow-down';
                
                // تحديد لون قوة الإشارة
                const strengthColors = {
                    'قوية': '#2ed573',
                    'متوسطة': '#ffa502',
                    'ضعيفة': '#ff4757'
                };
                
                const strengthColor = strengthColors[crypto.signalStrength] || '#888';
                
                // تحديد أيقونة النمط
                const patternIcons = {
                    'double-bottom': 'fa-chart-line',
                    'double-top': 'fa-chart-line',
                    'ascending-triangle': 'fa-play'
                };
                
                const patternIcon = patternIcons[crypto.pattern] || 'fa-chart-bar';

                return `
                    <div class="crypto-card" data-symbol="${crypto.symbol}">
                        <div class="card-header">
                            <div class="coin-info">
                                <h3><i class="fab fa-bitcoin"></i> ${crypto.name}</h3>
                                <span class="symbol">${crypto.symbol}</span>
                            </div>
                            <div class="price-info">
                                <div class="price">$${crypto.price.toFixed(4)}</div>
                                <div class="change ${changeClass}">
                                    <i class="fas ${changeIcon}"></i>
                                    ${crypto.change.toFixed(2)}%
                                </div>
                            </div>
                        </div>

                        <div class="pattern-info">
                            <div class="pattern-name">
                                <i class="fas ${patternIcon}"></i>
                                ${crypto.patternName}
                            </div>
                            <div class="pattern-details">
                                <div class="detail-item">
                                    <span class="detail-label">مستوى الثقة:</span>
                                    <span class="detail-value">${crypto.confidence}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">قوة الإشارة:</span>
                                    <span class="detail-value" style="color: ${strengthColor}">
                                        ${crypto.signalStrength}
                                    </span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">حالة الاختراق:</span>
                                    <span class="detail-value">${crypto.breakoutStatus}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">آخر تحديث:</span>
                                    <span class="detail-value">${this.formatTime(crypto.lastUpdate)}</span>
                                </div>
                            </div>
                        </div>

                        <div class="targets">
                            <div class="target target1">
                                <div style="font-weight: bold; margin-bottom: 0.25rem;">الهدف الأول</div>
                                <div>${crypto.targets.target1}</div>
                            </div>
                            <div class="target target2">
                                <div style="font-weight: bold; margin-bottom: 0.25rem;">الهدف الثاني</div>
                                <div>${crypto.targets.target2}</div>
                            </div>
                            <div class="target stop-loss">
                                <div style="font-weight: bold; margin-bottom: 0.25rem;">وقف الخسارة</div>
                                <div>${crypto.targets.stopLoss}</div>
                            </div>
                        </div>
                    </div>
                `;
            }

            formatTime(date) {
                const now = new Date();
                const diff = now - date;
                const minutes = Math.floor(diff / 60000);
                
                if (minutes < 1) return 'الآن';
                if (minutes < 60) return `${minutes} دقيقة`;
                
                const hours = Math.floor(minutes / 60);
                if (hours < 24) return `${hours} ساعة`;
                
                const days = Math.floor(hours / 24);
                return `${days} يوم`;
            }

            filterCards(searchTerm) {
                const cards = document.querySelectorAll('.crypto-card');
                const term = searchTerm.toLowerCase();

                cards.forEach(card => {
                    const symbol = card.dataset.symbol.toLowerCase();
                    const name = card.querySelector('.coin-info h3').textContent.toLowerCase();
                    const pattern = card.querySelector('.pattern-name').textContent.toLowerCase();

                    if (symbol.includes(term) || name.includes(term) || pattern.includes(term)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            showError(message) {
                const grid = document.getElementById('cardsGrid');
                grid.innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>حدث خطأ</h3>
                        <p>${message}</p>
                        <button onclick="location.reload()" class="refresh-btn" style="margin-top: 1rem;">
                            إعادة المحاولة
                        </button>
                    </div>
                `;
            }

            sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }
        }

        // بدء تشغيل التطبيق
        document.addEventListener('DOMContentLoaded', () => {
            console.log('🎯 تم تحميل الصفحة بنجاح');
            new PatternDetector();
        });

        // إضافة تحديث تلقائي كل 5 دقائق
        setInterval(() => {
            console.log('🔄 تحديث تلقائي...');
            if (window.patternDetector && !window.patternDetector.isLoading) {
                window.patternDetector.loadData();
            }
        }, 300000); // 5 دقائق

        // حفظ مرجع للكائن الرئيسي
        document.addEventListener('DOMContentLoaded', () => {
            window.patternDetector = new PatternDetector();
        });
    </script>
</body>
</html>


